<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[docker中使用oracle的坑！]]></title>
      <url>/2018/02/27/docker%E4%B8%AD%E4%BD%BF%E7%94%A8oracle%E7%9A%84%E5%9D%91%EF%BC%81/</url>
      <content type="html"><![CDATA[<p>搭建一个项目的环境时需要使用oracle数据库，oracle的安装大家都懂的，复杂，安装错了卸载也难，也影响电脑性能，于是我想用docker，在docker中下载一个别人的oracle镜像，运行，暴露端口，就和自己本机安装了一样使用。安装之后，导入dmp文件时怎么都不成功，报：IMP-00058: ORACLE error 12545 encountered的错，多方查找是需要修改安装时的tnsnames.ora文件，修改host为127.0.0.1    后才能导入!</p>
<p>tips：<br>基本命令，dockerfile文件<br>docker官网文档：<a href="https://docs.docker.com/get-started/" target="_blank" rel="external">https://docs.docker.com/get-started/</a></p>
<p>配置网易的镜像：<a href="http://hub-mirror.c.163.com" target="_blank" rel="external">http://hub-mirror.c.163.com</a></p>
<p>docker与主机间传输文件：<br>从主机复制到容器sudo docker cp host_path containerID:container_path<br>从容器复制到主机sudo docker cp containerID:container_path host_path</p>
]]></content>
      
        <categories>
            
            <category> Docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IDEA创建spring-boot支持jsp]]></title>
      <url>/2017/12/12/IDEA%E5%88%9B%E5%BB%BAspring-boot%E6%94%AF%E6%8C%81jsp/</url>
      <content type="html"><![CDATA[<p>spring boot默认是不支持jsp的，但是有时候为了便于测试，会使用jsp<br>官网文档中的示例：<a href="https://github.com/spring-projects/spring-boot/tree/v1.5.9.RELEASE/spring-boot-samples/spring-boot-sample-web-jsp" target="_blank" rel="external">https://github.com/spring-projects/spring-boot/tree/v1.5.9.RELEASE/spring-boot-samples/spring-boot-sample-web-jsp</a><br>导入有点问题，pom的scope有问题，自己建立的完整过程</p>
<p>①：Spring Initializr 建立Spring Boot项目<br>②：修改依赖(scope不要改，官网示例有点问题)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;javax.servlet&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;jstl&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;javax.servlet&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</div><div class="line">	&lt;scope&gt;provided&lt;/scope&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<p>③：增加webapp目录，这个时候还没有web.xml文件，IDEA的快捷的ctrl+shift+alt+s，到项目设置，在Modules设置web，指定Web Resource Directory为webapp，增加web.xml文件<br><img src="/2017/12/12/IDEA创建spring-boot支持jsp/1.PNG" alt="图片"><br>④：application.properties文件增加spring.mvc.view.prefix=/WEB-INF/jsp/，spring.mvc.view.suffix=.jsp。就可以使用jsp<br>tips：想支持UI界面，例如html，ftl等，Spring  Initializr时勾选freemarker，thymeleaf依赖即可，默认目录是template，静态文件目录是static<br>加入Actutat出现401，增加配置：management.security.enabled=false</p>
]]></content>
      
        <categories>
            
            <category> Spring Boot </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Cloud基本概念梳理]]></title>
      <url>/2017/11/10/Spring-Cloud%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E6%A2%B3%E7%90%86/</url>
      <content type="html"><![CDATA[<h1 id="Spring-Cloud的基本概念"><a href="#Spring-Cloud的基本概念" class="headerlink" title="Spring Cloud的基本概念"></a>Spring Cloud的基本概念</h1><p>官网文档：<a href="https://projects.spring.io/spring-cloud" target="_blank" rel="external">https://projects.spring.io/spring-cloud</a><br>基于Spring Boot构建，快速构建分布式系统</p>
<h2 id="使用问题总结"><a href="#使用问题总结" class="headerlink" title="使用问题总结"></a>使用问题总结</h2><ul>
<li><p>Maven构建时，Spring Boot应用不需要启动类配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;build&gt;</div><div class="line">    &lt;pluginManagement&gt;</div><div class="line">        &lt;plugins&gt;</div><div class="line">            &lt;plugin&gt;</div><div class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</div><div class="line">                &lt;configuration&gt;</div><div class="line">                    &lt;skip&gt;true&lt;/skip&gt;</div><div class="line">                &lt;/configuration&gt;</div><div class="line">            &lt;/plugin&gt;</div><div class="line">        &lt;/plugins&gt;</div><div class="line">    &lt;/pluginManagement&gt;</div><div class="line">&lt;/build&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>Spring Boot的启动类默认扫描本包及其子包，不想被ComponentScan扫描</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">主启动类：@ComponentScan(excludeFilters = &#123;@ComponentScan.Filter(type = FilterType.ANNOTATION,value = Exclude.class)&#125;)</div><div class="line">不想被扫描的组件：@Exclude</div><div class="line">public @interface Exclude&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Eureka：微服务注册与发现"><a href="#Eureka：微服务注册与发现" class="headerlink" title="Eureka：微服务注册与发现"></a>Eureka：微服务注册与发现</h2><ul>
<li>包含两个组件，Eureka Server和EurekaClient，Server提供服务发现的能力，各个微服务启动时注册自己的信息，Server存储这些信息</li>
<li>Client端是一个Java客户端，简化与Server端的交互</li>
<li>微服务启动后会周期性（默认是30秒）的向Server发送自己的心跳续约自己的”租期”</li>
<li>Server一段时间内没有接收到微服务的实例的心跳，Server会注销该实例</li>
<li>默认情况下，Server同时也是Client，多个Server实例互相之间通过复制的方式，实现服务注册表中数据的同步</li>
<li>Client端会缓存服务注册表的信息</li>
<li>Server提供了一些REST端点，非JVM的微服务可以使用这些REST端点，从而实现注册与发现</li>
<li>整个（Spring-boot-starter）-actuator，-security，官方文档有介绍</li>
</ul>
<h2 id="Ribbon：客户端负载均衡"><a href="#Ribbon：客户端负载均衡" class="headerlink" title="Ribbon：客户端负载均衡"></a>Ribbon：客户端负载均衡</h2><ul>
<li>默认eureka中引入了，为RestTemplate这个Bean增加LoadBalance即可</li>
<li>Java代码自定义Ribbon配置，使用@RibbonClient指定configuration时，定义某一个时Ribbon客户端的配置时，不用被@ComponentScan扫描</li>
<li>属性自定义Ribbon配置，修改application.property，具体使用参考官方文档</li>
<li>脱离Eureka使用Ribbon，配置ribbon的listOfServer</li>
</ul>
<h2 id="Fegin：声明式REST调用"><a href="#Fegin：声明式REST调用" class="headerlink" title="Fegin：声明式REST调用"></a>Fegin：声明式REST调用</h2><ul>
<li>避免拼接URL的方式传递参数，同时实现客户端的负载均衡</li>
<li>一些issue，①不支持@GetMapping等组合注解，②@PathVariable不能省略，需要设置value，③复杂对象Feign只支持POST方式，使用Map或者单个属性传参</li>
<li>第一次请求超时，原因：Hystrix默认的超时时间是1秒，解决方式<ul>
<li>设置超时时间更长：hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds: 5000</li>
<li>禁用Hystrix超时时间：hystrix.command.default.execution.timeout.enabled: false</li>
<li>禁用Feign的Hystrix：feign.hystrix.enabled: false</li>
</ul>
</li>
<li>支持继承能简化Feign的开发，也支持压缩</li>
</ul>
<h2 id="Hystric：微服务容错处理"><a href="#Hystric：微服务容错处理" class="headerlink" title="Hystric：微服务容错处理"></a>Hystric：微服务容错处理</h2><ul>
<li>整合Actuator，访问health可以查看断路器状态，执行回退逻辑不一定是断路器打开，请求失败，超时，被拒绝以及断路器打开时都会执行回退逻辑</li>
<li>隔离策略①线程隔离（THREAD）:HystrixCommand将在单独的线程上执行，并发请求受线程池中的线程数量限制②信号量隔离（SEMAPHORE）：HystrixCommand在调用线程上执行，开销较小，并发请求受信号量个数限制</li>
<li>正常使用结合Feign，实现Feign接口，FeginClient指定fallback类</li>
<li>Turbine监控可以结合消息中间件Stream，一般结合Boot Admin模块一起使用</li>
</ul>
<h2 id="使用Zuul：构建微服务网关"><a href="#使用Zuul：构建微服务网关" class="headerlink" title="使用Zuul：构建微服务网关"></a>使用Zuul：构建微服务网关</h2><ul>
<li>Zuul的核心是一系列的过滤器，启动配合Actutor，路径routes可以查看路由情况</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Spring Cloud </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring Cloud </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IDEA使用总结]]></title>
      <url>/2017/10/19/IDEA%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h1 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h1><p>智能提示啥的，快速查找什么的挺好用的</p>
<h2 id="下载-amp-激活"><a href="#下载-amp-激活" class="headerlink" title="下载&amp;激活"></a>下载&amp;激活</h2><p>下载没啥特别的，插件的下载就很蛋疼了，由于天朝的网络，比较推荐直接去 ：<a href="https://plugins.jetbrains.com/" target="_blank" rel="external">https://plugins.jetbrains.com/</a> 下载zip，本地安装<br>激活:<a href="http://idea.lanyus.com/" target="_blank" rel="external">http://idea.lanyus.com/</a> 有激活码，或者自己搭建 ：<a href="http://blog.lanyus.com/archives/317.html" target="_blank" rel="external">http://blog.lanyus.com/archives/317.html</a><br>利用docker，代理服务器，也可以激活jrebel</p>
<h2 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h2><h3 id="Spring-Boot-热部署无法使用"><a href="#Spring-Boot-热部署无法使用" class="headerlink" title="Spring Boot 热部署无法使用"></a>Spring Boot 热部署无法使用</h3><p><em>(个人不推荐Spring Boot的热部署，还是结合jrebel插件比较爽)</em></p>
<p>①：在设置中compile 设置 make project automatically<br>②：快捷键：Ctrl+Shift+a<em>(Registry)</em>，设置compiler.automake.allow.when.app.running</p>
<h2 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h2><p>自己备份一个自己的设置和插件就可以到处安装，激活和常用设置导入备份的文件就可以了<br>目录：C:\Users\qingn.IntelliJIdea2017.2   C:\Users\qingn.jrebel</p>
<h2 id="插件使用"><a href="#插件使用" class="headerlink" title="插件使用"></a>插件使用</h2><h3 id="jrebel-热部署插件，非常推荐"><a href="#jrebel-热部署插件，非常推荐" class="headerlink" title="jrebel 热部署插件，非常推荐"></a>jrebel 热部署插件，非常推荐</h3><p>第一次使用的时候，看网上的使用方式一大推，其实很简单，看官网，<a href="http://manuals.zeroturnaround.com/jrebel/ide/intellij.html" target="_blank" rel="external">http://manuals.zeroturnaround.com/jrebel/ide/intellij.html</a> 然后<a href="https://translate.google.cn/" target="_blank" rel="external">https://translate.google.cn/</a><br>①：下载安装激活jrebel<br>②：Jrebel Panel勾选需要热部署的项目<br>③：普通web项目，启动设置 <img src="/2017/10/19/IDEA使用总结/1.png" alt="web项目配置"><br>Spring Boot项目，设置make project automatically<br>④：利用jrebel debug启动项目</p>
<h3 id="Lombok-简化Bean"><a href="#Lombok-简化Bean" class="headerlink" title="Lombok 简化Bean"></a>Lombok 简化Bean</h3><p>看Spring Cloud源码中很多都有使用，简化bean的set，get，log的使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;1.16.10&lt;/version&gt;</div><div class="line">    &lt;scope&gt;provided&lt;/scope&gt;</div><div class="line"> &lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<p>勾选 Enable annotation processing </p>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Atlas性能监控使用]]></title>
      <url>/2017/10/15/Atlas%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h1><p>Atlas+Spectator+Grafana搭建的实时监控大盘.</p>
<p><a href="">搭建文档入口</a></p>
<h2 id="功能点"><a href="#功能点" class="headerlink" title="功能点"></a>功能点</h2><ul>
<li>HTTP请求TPS监控, 维度可细分, 包括uri,method,status(http返回状态)</li>
<li>HTTP请求每秒最大时间, 每秒累计总响应时间; 维度同上</li>
<li>RPC服务端和客户端监控</li>
<li>JVM内存使用情况</li>
<li>GC情况, 包括Minor,Major GC的次数,执行时间,暂停时间,内存回收速率,存活对象大小等</li>
<li>系统负载情况</li>
<li>线程数量</li>
<li>类加载数量</li>
<li>自定义业务指标监控</li>
<li>DiscoveryClient相关监控</li>
</ul>
<h2 id="接入方式"><a href="#接入方式" class="headerlink" title="接入方式"></a>接入方式</h2><p>监控相关功能封装在i2fsp-monitor模块, 默认会由基础框架自动引入, 无需额外显示引入.</p>
<h2 id="快速体验"><a href="#快速体验" class="headerlink" title="快速体验"></a>快速体验</h2><p>dev: <a href="http://192.168.30.142:3000" target="_blank" rel="external">http://192.168.30.142:3000</a><br>prod: <a href="http://118.26.129.169:8900/admin/" target="_blank" rel="external">http://118.26.129.169:8900/admin/</a></p>
<p><em>(公网就可以访问)</em></p>
<p>目前在Grafana中提供两个Dashboard, 一个是通用Dashboard, 会自动收录已上报监控数据的服务和机器, 暂时通用监控面板内容; 另一个是应用监控模板, 各应用可以参考模板自定义各自的监控面板.</p>
<p><img src="/2017/10/15/Atlas性能监控使用/monitor-01.png" alt="通用Dashboard"></p>
<p><img src="/2017/10/15/Atlas性能监控使用/monitor-02.png" alt="业务Dashboard参考"></p>
<h2 id="详细说明"><a href="#详细说明" class="headerlink" title="详细说明"></a>详细说明</h2><h3 id="名称解释"><a href="#名称解释" class="headerlink" title="名称解释:"></a>名称解释:</h3><ul>
<li>metricsName: 监控指标名称</li>
<li>tag: 监控指标的标记, 每个metric可以有多个tags, 每个tag是一个key,value的键值对, 可用于分类,属性标识.</li>
<li>Timer: 时间维度统计, 常用于统计事件发生速率, 每秒总时间等, 记录5种统计值，count, max, min, totalOfSquares, totalTime, 分别用于计算发生速率，单次最大时间，单词最小值, 类方差，每秒累计时间</li>
<li>Gauge: 用于记录一些具体数值， 比如线程池中正在运行的线程数等。</li>
<li>Counter: 用来统计事件发生的频率</li>
</ul>
<h3 id="监控指标信息查询"><a href="#监控指标信息查询" class="headerlink" title="监控指标信息查询"></a>监控指标信息查询</h3><p>监控数据上报给Atlas, Atlas提供了强大的语法查询功能, 可查询监控指标详情, 监控json数据, 监控图表等. <a href="https://github.com/Netflix/atlas/wiki" target="_blank" rel="external">官方文档入口</a></p>
<p>以下给出监控指标信息查询样例:</p>
<ul>
<li><p>查询所有监控指标:<br><a href="http://192.168.30.40:7101/api/v1/tags/name" target="_blank" rel="external">http://192.168.30.40:7101/api/v1/tags/name</a></p>
</li>
<li><p>查询名为”rest”的metric所有tags:<br><a href="http://192.168.30.40:7101/api/v1/tags?q=name,rest,:eq" target="_blank" rel="external">http://192.168.30.40:7101/api/v1/tags?q=name,rest,:eq</a></p>
</li>
<li><p>查询名为”rest”的metric的tag为statistic的可选值:<br><a href="http://192.168.30.40:7101/api/v1/tags/statistic?q=name,rest,:eq" target="_blank" rel="external">http://192.168.30.40:7101/api/v1/tags/statistic?q=name,rest,:eq</a></p>
</li>
</ul>
<h3 id="Global-Tags"><a href="#Global-Tags" class="headerlink" title="Global Tags:"></a>Global Tags:</h3><ul>
<li>“app”: 应用名 </li>
<li>“ip”: 机器IP</li>
</ul>
<h3 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h3><ul>
<li>name: rest, 指标名</li>
<li>atlas.dstype: 数据类型, 可选值为:gauge</li>
<li>exception: 已出异常名</li>
<li>method: http请求方法, 如: GET, POST</li>
<li>statistic: 统计类型, 可选值: [“count”,”max”,”min”,”totalOfSquares”,”totalTime”], 参考”Timer”解释.</li>
<li>status: http响应状态码, 比如200, 301, 302, 400等</li>
<li>type: 类型, [“COUNTER”,”GAUGE”,”NORMALIZED”]</li>
<li>unit: 时间单位, [“MILLISECONDS”]</li>
<li>uri: 请求路径, 不包括参数</li>
</ul>
<h3 id="RPC请求"><a href="#RPC请求" class="headerlink" title="RPC请求"></a>RPC请求</h3><h4 id="公共"><a href="#公共" class="headerlink" title="公共:"></a>公共:</h4><ul>
<li>name: rpc</li>
<li>rtype: {“client”, “server”}</li>
<li>atlas.dstype: {“gauge”,”rate”} (这里选择”gauge”用于时间维度统计, “rate”用于统计发生次数)</li>
<li>statistic: 参考”Timer”解释.</li>
<li>unit: 时间单位, [“MILLISECONDS”]</li>
</ul>
<h4 id="RPC-Client"><a href="#RPC-Client" class="headerlink" title="RPC-Client"></a>RPC-Client</h4><ul>
<li>host: RPC调用的服务HOST地址</li>
<li>uri: RPC调用的服务的路径</li>
</ul>
<h4 id="RPC-Server"><a href="#RPC-Server" class="headerlink" title="RPC-Server"></a>RPC-Server</h4><ul>
<li>class: 远程服务提供类名</li>
<li>hasException: 执行过程中是否出现异常</li>
<li>method: 提供远程服务的方法名</li>
</ul>
<h3 id="自定义监控"><a href="#自定义监控" class="headerlink" title="自定义监控"></a>自定义监控</h3><p>代码中在方法上增加注解@Monitor(com.i2fsp.monitor.annotation.Monitor)</p>
<p>注解参数:</p>
<ul>
<li>metricName: 监控指标命名, 默认为类名加方法名, 如”OrderService.createOrder”</li>
<li>type: 统计类型, 默认为timer统计, types不为空时, 该属性失效. 可选枚举值为 {TIMER(时间维度统计, 包括每秒最大值, 频率, 每秒总耗时等), COUNTER(累计值统计, long), Gauge(数值统计, double)}</li>
<li>types: 多个统计类型同时使用, 不为空时, type属性失效</li>
<li>tags: 该指标其他维度的描述, 可用于分类</li>
</ul>
<p>例如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@Monitor(tags=&#123;</div><div class="line">            @Tag(key=&quot;prop&quot;, value=&quot;v1&quot;),</div><div class="line">            @Tag(key=&quot;prop2&quot;, value=&quot;v2&quot;)</div><div class="line">    &#125;,metricName=&quot;testService.bench&quot;)</div><div class="line">public String bench() &#123;</div><div class="line">    return &quot;hello bench&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Monitor(tags=&#123;@Tag(key=&quot;key1&quot;, value=&quot;value1&quot;)&#125;, types = &#123;MonitorType.COUNTER, MonitorType.TIMER&#125;)</div><div class="line">public String bench1() &#123;</div><div class="line">    return &quot;hello bench1&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意: metricName可不指定, 默认为类名加方法名</p>
<h3 id="监控配置说明"><a href="#监控配置说明" class="headerlink" title="监控配置说明"></a>监控配置说明</h3><ul>
<li>monitor.enabled: 控制是否开启监控, 包括metric统计和日志中的requestId, 默认开启</li>
<li>monitor.atlas.enabled: 是否上报监控到atlas. 默认开启</li>
<li>monitor.atlas.metric.filters: 配置被过滤不收集的监控指标信息</li>
<li>monitor.rpc.server.enabled: 控制RPCServer是否开启监控, 默认开启</li>
<li>monitor.rpc.statsd.enabled: 控制RPCServer是否开启statsd监控, 用于兼容之前监控, 默认开启, 另外受之前开关同时控制</li>
<li>monitor.rpc.client.enabled: 控制RPCClient是否开启监控, 默认开启</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Spring Cloud </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring Cloud </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo+github本博客的搭建过程]]></title>
      <url>/2017/10/10/hexo-github%E6%9C%AC%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="hexo-github本博客的搭建过程"><a href="#hexo-github本博客的搭建过程" class="headerlink" title="hexo+github本博客的搭建过程"></a>hexo+github本博客的搭建过程</h1><p>二话不说就是官网文档：<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">https://hexo.io/zh-cn/docs/</a> 有中文版，哈哈<br>个人感觉的Maven的生命周期和插件有点像<br>nodejs淘宝的nmp镜像：<a href="https://npm.taobao.org/" target="_blank" rel="external">https://npm.taobao.org/</a><br>或者直接：npm config set registry <a href="https://registry.npm.taobao.org/" target="_blank" rel="external">https://registry.npm.taobao.org/</a> </p>
<h2 id="基本搭建"><a href="#基本搭建" class="headerlink" title="基本搭建"></a>基本搭建</h2><p>①：配好自己的github<br>②：创建一个自己username相同的仓库<br>③：官网的git方式部署：<a href="https://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="external">https://hexo.io/zh-cn/docs/deployment.html</a></p>
<h2 id="目录梳理"><a href="#目录梳理" class="headerlink" title="目录梳理"></a>目录梳理</h2><p><img src="/2017/10/10/hexo-github本博客的搭建过程/1.jpg" alt="目录梳理"></p>
<h2 id="导航栏使用"><a href="#导航栏使用" class="headerlink" title="导航栏使用"></a>导航栏使用</h2><p>分类，关于，标签等使用方式相同<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo new page &quot;categories&quot;</div><div class="line">hexo new page &quot;tags&quot;</div><div class="line">hexo new page &quot;about&quot;</div></pre></td></tr></table></figure></p>
<p>修改各自文件夹的index.md，type: “{page.name}”,完事</p>
<h2 id="搜索-rss-sitemap"><a href="#搜索-rss-sitemap" class="headerlink" title="搜索,rss,sitemap"></a>搜索,rss,sitemap</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">npm install hexo-renderer-ejs --save</div><div class="line">npm install hexo-renderer-less --save</div><div class="line">npm install hexo-deployer-git --save</div><div class="line">npm install hexo-generator-search --save</div><div class="line">npm install hexo-asset-image --save</div><div class="line">npm install hexo-generator-feed --save</div><div class="line">npm install hexo-generator-sitemap --save</div></pre></td></tr></table></figure>
<h2 id="图片的使用"><a href="#图片的使用" class="headerlink" title="图片的使用"></a>图片的使用</h2><p>①：主页文件：_config.yml的post_asset_folder:这个选项设置为true<br>②：插件安装：npm install hexo-asset-image –save<br>③：hexo n “{article.name}”,编写md文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![replace world](&#123;article.name&#125;/&#123;png.name&#125;.png)</div></pre></td></tr></table></figure></p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul>
<li>发布：hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</li>
<li>本地：hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</li>
<li>新建：hexo n “title”</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
